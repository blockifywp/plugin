# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: "Integrate"

on:
  push:
    branches:
      - "main"
  pull_request: null
  # Add [skip ci] to commit message to skip CI.

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  byte_level:
    name: "0️⃣ Byte level"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check file permissions"
        run: |
          test "$(find . -type f -not -path './.git/*' -executable)" = ""

      - name: "Find non-printable ASCII characters"
        run: |
          #! LC_ALL=C.UTF-8 find . -type f -name 'includes/*.php' -print0 | xargs -0 -- grep -PHn '[^\t -~]' | grep -v '// @ignore-non-ascii$'
          ! LC_ALL=C.UTF-8 find . -type f -name 'includes/*.php' -print0 | xargs -0 -- grep -PHn '[^\t -~]'

  syntax_errors:
    name: "1️⃣ Syntax errors"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "7.4"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check source code for syntax errors"
        run: "composer exec -- parallel-lint functions.php includes/ patterns/"

  unit_tests:
    name: "2️⃣ Unit and functional tests"
    needs:
      - "byte_level"
      - "syntax_errors"
    strategy:
      #fail-fast: false
      matrix:
        php-version:
          - "7.4"
          - "8.0"
          - "8.1"
          - "8.2"
        dependencies:
          - "lowest"
          - "highest"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

  #      - name: "Execute unit tests"
  #        run: "composer run pest -- --ci"

  #      - name: "Send coverage to Coveralls"
  #        env:
  #          COVERALLS_REPO_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  #        if: "${{ env.COVERALLS_REPO_TOKEN && matrix.php-version == '7.4' && matrix.dependencies == 'highest' }}"
  #        run: |
  #          wget "https://github.com/php-coveralls/php-coveralls/releases/download/v2.5.2/php-coveralls.phar"
  #          php ./php-coveralls.phar -v

  static_analysis:
    name: "3️⃣ Static Analysis"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "7.4"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Validate Composer configuration"
        run: "composer validate --strict"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check PSR-4 mapping"
        run: "composer dump-autoload --optimize --strict-psr"

      - name: "Perform static analysis"
        run: "composer run phpstan"
        # @TODO Mess Detector, Magic Number Detector, Copy-Paste Detector

  coding_standards:
    name: "4️⃣ Coding Standards"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "7.4"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check EditorConfig configuration"
        run: "test -f .editorconfig"

      - name: "Check adherence to EditorConfig"
        uses: "greut/eclint-action@v0"
        with:
          eclint_args: "-exclude=vendor/**,patterns/**,assets/**"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check coding style"
        run: "composer run phpcs"

  exported_files:
    name: "5️⃣ Exported files"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check exported files"
        # @FIXME Fix vendor/ distribution
        run: |
          EXPECTED="LICENSE,composer.json,functions.php,index.php,package.json,readme.txt,screenshot.png,style.css,theme.json"
          CURRENT="$(git archive HEAD | tar --list --exclude="includes" --exclude="includes/*" --exclude="assets" --exclude="assets/*" --exclude="patterns" --exclude="patterns/*" --exclude="templates" --exclude="templates/*" --exclude="parts" --exclude="parts/*" --exclude="vendor" --exclude="vendor/*" | paste --serial --delimiters=",")"
          echo "CURRENT =${CURRENT}"
          echo "EXPECTED=${EXPECTED}"
          test "${CURRENT}" = "${EXPECTED}"
